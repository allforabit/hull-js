// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore'], function(Backbone, _) {
    var HullWidget, decamelize, default_datasources, slice;
    slice = Array.prototype.slice;
    decamelize = function(camelCase) {
      return camelCase.replace(/([A-Z])/g, '_' + '$1').toLowerCase();
    };
    default_datasources = {
      me: 'me',
      app: 'app',
      org: 'org'
    };
    HullWidget = (function(_super) {

      __extends(HullWidget, _super);

      HullWidget.prototype.context = {};

      HullWidget.prototype.actions = {};

      HullWidget.prototype.refreshEvents = ["hull.model.me.change"];

      HullWidget.prototype.initialize = function() {};

      function HullWidget(options) {
        this.refresh = __bind(this.refresh, this);

        this.render = __bind(this.render, this);

        this.afterRender = __bind(this.afterRender, this);

        this.actionHandler = __bind(this.actionHandler, this);

        this.doRender = __bind(this.doRender, this);

        this.getTemplate = __bind(this.getTemplate, this);

        this.loggedIn = __bind(this.loggedIn, this);

        this.buildContext = __bind(this.buildContext, this);

        this.renderTemplate = __bind(this.renderTemplate, this);

        var refreshOn, _base, _base1, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4,
          _this = this;
        this.ref = options.ref;
        try {
          this.events = _.isFunction(this.events) ? this.events() : this.events;
          if ((_ref = this.events) == null) {
            this.events = {};
          }
          this.events["click [data-hull-action]"] = 'actionHandler';
          this.actions = _.isFunction(this.actions) ? this.actions() : this.actions;
          if ((_ref1 = this.actions) == null) {
            this.actions = {};
          }
          if ((_ref2 = (_base = this.actions).login) == null) {
            _base.login = function(source, e, options) {
              return _this.sandbox.login(options.provider, options);
            };
          }
          if ((_ref3 = (_base1 = this.actions).logout) == null) {
            _base1.logout = function() {
              return _this.sandbox.logout();
            };
          }
          if (this.className == null) {
            this.className = "hull-widget";
            if (this.namespace != null) {
              this.className += " hull-" + this.namespace;
            }
          }
          _.each(_.functions(this.actions), function(f) {
            return _this.actions[f] = _.bind(_this.actions[f], _this);
          });
          this.datasources = _.extend({}, default_datasources, this.datasources || {}, options.datasources || {});
          _ref4 = this.refreshEvents || [];
          for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
            refreshOn = _ref4[_i];
            this.sandbox.on(refreshOn, (function() {
              return _this.refresh();
            }), this);
          }
        } catch (e) {
          console.error("Error loading HullWidget", e);
        }
        Backbone.View.prototype.constructor.apply(this, arguments);
      }

      HullWidget.prototype.renderTemplate = function(tpl, data) {
        var _ref, _tpl;
        _tpl = (_ref = this._templates) != null ? _ref[tpl] : void 0;
        if (_tpl) {
          return _tpl(data || this);
        } else {
          return "Cannot find template '" + tpl + "'";
        }
      };

      HullWidget.prototype.beforeRender = function(data) {
        return data;
      };

      HullWidget.prototype.buildContext = function() {
        var dfd, keys, promises, ret, templateDeferred, widgetDeferred, _ref,
          _this = this;
        if ((_ref = this._renderCount) == null) {
          this._renderCount = 0;
        }
        this._renderCount++;
        ret = _.clone(this.context || {});
        dfd = this.sandbox.data.deferred();
        try {
          keys = _.keys(this.datasources);
          promises = _.map(keys, function(k) {
            if (_.isString(_this.datasources[k])) {
              return _this.sandbox.data.api.model(_this.datasources[k]).deferred;
            } else if (_.isFunction(_this.datasources[k])) {
              return _this.datasources[k].call(_this);
            } else {
              return _this.datasources[k];
            }
          });
          widgetDeferred = $.when.apply($, promises);
          templateDeferred = this.sandbox.template.load(this.templates, this.ref);
          $.when(widgetDeferred, templateDeferred).done(function(data, tpls) {
            var args;
            args = data;
            _.map(keys, function(k, i) {
              var _ref1;
              if (_.isFunction((_ref1 = args[i]) != null ? _ref1.toJSON : void 0)) {
                return ret[k] = args[i].toJSON();
              } else {
                return ret[k] = args[i];
              }
            });
            ret.loggedIn = _this.loggedIn();
            ret.renderCount = _this._renderCount;
            _this._templates = tpls;
            return dfd.resolve(ret);
          });
        } catch (e) {
          console.error("Caught error in buildContext", e);
          dfd.reject(e);
        }
        return dfd;
      };

      HullWidget.prototype.loggedIn = function() {
        return !!this.sandbox.data.api.model('me').id;
      };

      HullWidget.prototype.getTemplate = function(tpl, data) {
        return tpl || this.template || this.templates[0];
      };

      HullWidget.prototype.doRender = function(tpl, data) {
        var ret;
        ret = this.renderTemplate(this.getTemplate(tpl, data), data);
        this.$el.addClass(this.className);
        this.$el.html(ret);
        return this;
      };

      HullWidget.prototype.actionHandler = function(e) {
        var action, fn, k, options, source, v, _ref;
        try {
          source = $(e.currentTarget);
          action = source.data("hull-action");
          fn = this.actions[action] || this["" + action + "Action"];
          if (!_.isFunction(fn)) {
            throw new Error("Can't find action " + action + " on this Widget");
          }
          options = {};
          _ref = source.data();
          for (k in _ref) {
            v = _ref[k];
            options[decamelize(k).replace("hull_", "")] = v;
          }
          return fn.call(this, source, e, options);
        } catch (e) {
          return console.error("oops... missed action?", e);
        }
      };

      HullWidget.prototype.afterRender = function(data) {
        return data;
      };

      HullWidget.prototype.render = function(tpl, data) {
        var ctx,
          _this = this;
        ctx = this.buildContext.call(this);
        ctx.fail(function(err) {
          return console.error("Error building context: ", err);
        });
        return ctx.then(function(ctx) {
          return $.when(_this.beforeRender.call(_this, ctx)).done(function(data) {
            if (data == null) {
              throw new Error("beforeRender must return the data !");
            }
            _this.doRender(tpl, data);
            _.defer(_this.afterRender.bind(_this, data));
            return _.defer((function() {
              return this.sandbox.start(this.$el);
            }).bind(_this));
          });
        });
      };

      HullWidget.prototype.refresh = function() {
        return this.render();
      };

      return HullWidget;

    })(Backbone.View);
    return function(env) {
      return env.core.registerWidgetType("Hull", HullWidget.prototype);
    };
  });

}).call(this);
