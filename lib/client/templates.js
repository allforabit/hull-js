// Generated by CoffeeScript 1.3.3
(function() {

  define(function() {
    return {
      init: function(env) {
        return env.core.template.load = function(tplNames, ref, format) {
          var dfd, loadedTemplates, localTpl, name, names, parsed, path, paths, requirePaths, ret, _i, _len;
          if (format == null) {
            format = "hbs";
          }
          loadedTemplates = {};
          if (_.isString(tplNames)) {
            names = [tplNames];
          }
          paths = [];
          dfd = env.core.data.deferred();
          ret = {};
          for (_i = 0, _len = tplNames.length; _i < _len; _i++) {
            name = tplNames[_i];
            path = "" + ref + "/" + name;
            localTpl = env.core.dom.find("script[data-hull-template='" + path + "']");
            if (localTpl.length) {
              parsed = env.template.parse(localTpl.text(), name);
              ret[name] = parsed;
              define(path, parsed);
            } else {
              paths.push([name, "" + format + "!" + path]);
            }
          }
          if (paths.length > 0) {
            requirePaths = _.map(paths, function(p) {
              return p[1];
            });
            require(requirePaths, function() {
              var i, res, t, _j, _len1;
              res = Array.prototype.slice.call(arguments);
              for (i = _j = 0, _len1 = res.length; _j < _len1; i = ++_j) {
                t = res[i];
                ret[paths[i][0]] = env.core.template.hbs(t);
              }
              return dfd.resolve(ret);
            }, dfd.reject);
          } else {
            dfd.resolve(ret);
          }
          return dfd.promise();
        };
      }
    };
  });

}).call(this);
